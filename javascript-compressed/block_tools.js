var BlockTools;(function(a){a.createXml=a=>Blockly.Xml.textToDom("<xml>"+a+"</xml>"),a.obtainXml=b=>Array.from(a.createXml(b).childNodes).crumble(),a.map=(()=>{let b=(b,c,d)=>({block:b,scope:c,diagram:d,getValue:c=>a.getValue(b,c)}),c=(a,b,c)=>a[b]instanceof Array?a[b][a[b].push(c)-1]:(a[b]=c,a[b]),d=(d,f,g,h,i,j)=>{let k=j[d];if(k instanceof Object&&"function"!=typeof k)i=c(i,d,{}),e(f,g,h,i,k);else{if("function"==typeof k&&(k=k.call(b(g,i,h))),"string"!=typeof k)throw new TypeError("Invalid return value in \""+d+"\", expected string, got "+Object.getType(k)+".");c(i,d,a.getValue(g,k))}},e=(a,c,f,g,h)=>{if(c.isInsertionMarker())return;h=h||a.$main,f=f||{},g=g||f,g=h.$as?g=g[h.$as]=g[h.$as]||{}:g;let i=c.getNextBlock(),j=c.getPreviousBlock(),k=h.$next,l=h.$prev;for(let e in h.$runme&&h.$runme.call(b(c,g,f)),h){let i=h[e];if(!["$next","$prev","$as","$runme"].includes(e)){if(["$lit_","$literal_"].some(a=>e.startsWith(a))){i=e.startsWith("$lit_")&&"function"==typeof i?i.call(b(c,g,f)):Object.clone(i),g[e.substr(e.indexOf("_")+1)]=i;continue}if("string"==typeof i&&i.startsWith("$")){g[e]=c.id;continue}d(e,a,c,f,g,h)}}return k&&i&&("function"==typeof k&&(k=k.call(b(c,g,f),i)),e(a,i,f,g,a[k])),f};return e})();let b;(function(a){class b extends AdvancedError{constructor(a,b,c){if(a instanceof Error)super("Encountered error while mapping.",a);else{let d=c.split("."),e=d[b];d=d.slice(0,b);let f=0==d.length?0:d.reduce((a,b)=>("string"==typeof a?a.length:a)+b.length+1);f="string"==typeof f?f.length+1:f,super(`No ${a} with the name "${e}".\n\t\t${c}\n\t\t${" ".repeat(f)}${"~".repeat(e.length)}`),this.path=c,this.index=b,this.type=a}}}a.MapperError=b})(b=a.Map||(a.Map={})),a.getValue=(a,c)=>{let d=a,e=c.split(".");for(let f=0;f<e.length;f++){d=d;let a=e[f];if(null==d.getInput(a)&&f!=e.length-1)throw new b.MapperError("input",f,c);else if(null==d.getField(a)&&f==e.length-1)throw new b.MapperError("field",f,c);if(d=f==e.length-1?d.getFieldValue(a):d.getInputTargetBlock(a),null==d)return}return(a=>({false:!1,true:!0})[a.toLowerCase()]==null?isNaN(parseInt(a))?a:parseInt(a):{false:!1,true:!0}[a.toLowerCase()])(d)};class c{constructor(a,b){this.generators={},this.mapper=a,this.blockType=b}generate(b,d){let e=b.getAllBlocks();if("string"==typeof this.blockType)e=e.filter(a=>a.type==this.blockType);else{let a=e;e=this.blockType(e),e=e.filter(b=>a.includes(b))}let f={time(a){this[a]=this[a]?(performance.now()-this[a])/1e3:performance.now()}};f.time("mapping");let g=e.map(b=>[b.id,(()=>{try{return a.map(this.mapper,b)}catch(a){return new c.GeneratorError("Map process failed.",a)}})()]);f.time("mapping");let h={};"string"==typeof d&&(d=this.generators[d]);let i=g.map(([a,b])=>{if(b instanceof c.GeneratorError)return b;let e;f.time(a);try{e=d(b,h)}catch(a){e=new c.GeneratorError("Compile process failed.",a)}return e instanceof c.GeneratorError?f[a]=null:f.time(a),e});return console.debug("Generator Timing Object (In Seconds):",f),i}addGenerator(a,b){this.generators[b]=a}}a.CodeGenerator=c,function(a){class b extends AdvancedError{}a.GeneratorError=b}(c=a.CodeGenerator||(a.CodeGenerator={}));class d{constructor(){this.shown="",this.used="",this.problems=[]}append(...a){for(let b of a)b instanceof Array?(b[0]&&(this.shown+=b[0]),b[1]&&(this.used+=b[1])):b instanceof d?(this.shown+=b.getShown(),this.used+=b.getUsed(),this.problems.push(...b.getProblems())):(this.shown+=b,this.used+=b);return this}ifOver(a,...b){let c=this.shown.length-this.shown.lastIndexOf("\n")>=a,e=this.used.length-this.used.lastIndexOf("\n")>=a;c&&(this.shown+="\n"),e&&(this.used+="\n");for(let f of b)f instanceof Array?(c&&f[0]&&(this.shown+=f[0]),e&&f[1]&&(this.used+=f[1])):f instanceof d?(c&&(this.shown+=f.getShown()),e&&(this.used+=f.getUsed())):(c&&(this.shown+=f),e&&(this.used+=f));return this}pushProblem(a){return this.problems.push(a),this}getShown(){return this.shown}getUsed(){return this.used}getProblems(){return this.problems}}a.Code=d;a.Types=class{constructor(){this.table={},this.updateDropdown=this.divert(function(a){let b=Object.entries(this.table).map(b=>b.reverse()),c=a&&"-1"!=a.getValue()?[["Delete Type...","-3"]]:[];return[["Anything","-1"],...b,["Create Type...","-2"],...c]}),this.validateDropdown=this.divert(function(a,b){let c={"-2":()=>this.createType()||null,"-3":()=>this.deleteType(a.sourceBlock_.workspace,a.getValue())},d=c[b]?c[b]():void 0;return d}),this.buildToolbox=this.mine(function(){let b=(b,c)=>a.obtainXml("<button text=\""+b+"\" callbackKey=\""+c+"\"/>"),c="<block type=\"builder_type\"><field name=\"type\">",d="</field></block>",e=[b("Create Type...","createType")];for(let f in 0!=Object.keys(this.table).length&&e.push(b("Delete Type...","deleteType")),e.push(a.obtainXml([c,"-1",d].join(""))),this.table)e.push(a.obtainXml([c,f,d].join("")));return e}),this.createType=this.mine(function(a){let b=prompt("Enter the name of the type to create...");if(![null,""].includes(b)){if(Object.values(this.table).includes(b))return alert("A type already exists with the name \""+b+"\".");let c=Math.max(-1,...Object.keys(this.table).map(a=>parseInt(a)))+1;return this.table[c]=b,a&&a.getTargetWorkspace().getToolbox().refreshSelection(),c.toString()}}),this.deleteType=this.mine(function(a,b,c){if(a instanceof Blockly.Workspace){if(!Object.keys(this.table).includes(b))return!1;if(!c&&(c=confirm("Are you sure you want to delete the type \""+this.table[b]+"\"?"),!c))return!1;let[d]=Object.entries(this.table).find(([a])=>a==b);delete this.table[d];for(let b of a.getAllBlocks())"builder_type"==b.type&&b.getField("type").getValue()==d&&b.dispose(!1,!0);return!0}let d=this.table[Math.max(...Object.keys(this.table).map(b=>parseInt(b)))];return(b=prompt("Enter the name of the type to delete...",d),![null,""].includes(b))&&((b=Object.fromEntries(Object.entries(this.table).map(b=>b.reverse()))[b],this.deleteType(a.getTargetWorkspace(),b,!0))?(a.getTargetWorkspace().getToolbox().refreshSelection(),!0):(alert("No type exists with the name \""+b+"\"."),!1))})}mine(a){return a.bind(this)}divert(a){let b=this;return function(...c){return c.unshift(this),a.apply(b,c)}}getConstructArgs(){return[this.updateDropdown,this.validateDropdown]}register(a){a.registerToolboxCategoryCallback("TYPES",this.buildToolbox),a.registerButtonCallback("createType",this.createType),a.registerButtonCallback("deleteType",this.deleteType)}toType(a){return"-1"==a?null:this.table[a]}};class e{constructor(a){this.colour=null,this.inputStyle=null,this.hat=void 0,this.inputs=[],this.output=void 0,this.previous=void 0,this.next=void 0,this.name=a}appendValueInput(a){return this.inputs.push(new e.ValueInput(a)),this}appendStatementInput(a){return this.inputs.push(new e.StatementInput(a)),this}appendDummyInput(){return this.inputs.push(new e.DummyInput),this}getLastInput(){return 0==this.inputs.length&&this.appendDummyInput(),this.inputs.last}appendField(a,b){return this.getLastInput().appendField(a,b),this}setAlign(a){return this.getLastInput().setAlign(a),this}setCheck(...a){let b=this.getLastInput();if(!(b instanceof e.TypedInput))throw new TypeError("The last input provided is not a TypedInput.");return b.setCheck(a),this}setOutput(...a){return"boolean"!=typeof a[0]||a.shift()?(this.output=a.crumbleFlat(),this):this}setPreviousStatement(...a){return"boolean"!=typeof a[0]||a.shift()?(this.previous=a.crumbleFlat(),this):this}setNextStatement(...a){return"boolean"!=typeof a[0]||a.shift()?(this.next=a.crumbleFlat(),this):this}setBothStatements(...a){return"boolean"!=typeof a[0]||a.shift()?(this.next=a.crumbleFlat(),this.previous=this.next,this):this}setHat(a){return this.hat=a?"cap":void 0,this}setInputsInline(a){return this.inputStyle=a,this}setColour(a){return this.colour=a,this}build(){let a=this,b=function(){for(let b of a.inputs){let a={[e.DummyInput.name]:"DummyInput",[e.StatementInput.name]:"StatementInput",[e.ValueInput.name]:"ValueInput"}[b.constructor.name],c=b instanceof e.TypedInput?b:null,d=this["append"+a](c&&c.name);d.setAlign(b.alignment),c&&d.setCheck(c.acceptingType);for(let a of b.fields){if("string"==typeof a){d.appendField(a);continue}let b={[e.FieldAngle.name]:"FieldAngle",[e.FieldDropdown.name]:"FieldDropdown",[e.FieldTextInput.name]:"FieldTextInput"}[a.constructor.name];d.appendField(new Blockly[b](...a.getArguments()),a.name)}}this.setOutput(a.output!==void 0,a.output),this.setPreviousStatement(a.previous!==void 0,a.previous),this.setNextStatement(a.next!==void 0,a.next),this.setInputsInline(a.inputStyle),this.setColour(a.colour),this.hat=a.hat};return{init:b}}register(){Blockly.Blocks[this.name]=this.build()}}a.Builder=e,function(a){a.Input=class{constructor(){this.fields=[],this.alignment=-1}appendField(a,b){return"string"==typeof a?this.fields.push(a):void(a.name=b,this.fields.push(a))}setAlign(a){let b={LEFT:-1,CENTRE:0,RIGHT:1};this.alignment=null==b[a]?a:b[a]}};class b extends a.Input{constructor(a){super(),this.name=a}setCheck(...a){this.acceptingType=a.crumbleFlat()}}a.TypedInput=b;class c extends a.TypedInput{}a.ValueInput=c;class d extends a.TypedInput{}a.StatementInput=d;class e extends a.Input{}a.DummyInput=e;a.Field=class{constructor(a,b){this.value=a,this.validator=b}getArguments(){return[this.value,this.validator]}};class f extends a.Field{}a.FieldAngle=f;class g extends a.Field{}a.FieldTextInput=g;class h extends a.Field{constructor(a,b){if(!(a instanceof Array)&&"function"!=typeof a)a=Object.entries(a).map(([a,b])=>[b,a]);else if("function"==typeof a){let b=a;a=function(...a){let c=b.apply(this,a);return c instanceof Array?c:Object.entries(c).map(([a,b])=>[b,a])}}super(a,b)}getArguments(){return[this.value,this.validator]}}a.FieldDropdown=h}(e=a.Builder||(a.Builder={}))})(BlockTools||(BlockTools={}));